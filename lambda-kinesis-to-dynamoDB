const AWS = require("aws-sdk");
AWS.config.region = "us-east-1";

// IMPORTING THE DYNAMODB LIBRARY
const DynamoDB = require('aws-sdk/clients/dynamodb');
// NEW INSTANTIATING THE DOCUMENT CLIENT
const dynamoDBclient = new DynamoDB.DocumentClient();

exports.handler = async (event) => {
    // let's log the incoming event
    let payloadAsString = JSON.stringify(event);
    console.log(payloadAsString);
    try{
        let batch = [];
        let putRequestBatches = [];
        // event contains Records, which is an array with a certain structure
        for(let i=0;i<event.Records.length;i++) {
            //let's get the Record
            let record = event.Records[i];
            // let's decode the base64-encoded payload that was sent
            let data = Buffer.from(record.kinesis.data,'base64').toString('utf-8');
            // let's show the data
            console.log(`Data received: ${data}`);
            // let's show the timestamp in which it was received (approximately)
            let receivedTst = new Date(record.kinesis.approximateArrivalTimestamp*1000);
            console.log(`Received tst: ${receivedTst}`);
            //-----
            // The following part of the code deals with the DynamoDB batches
            //-----
            // 
            let dataForDynamoDB = JSON.parse(data)
            
            dataForDynamoDB["timestamp"] = // make sure this is same as partition key in ddb table
                dataForDynamoDB.event_time
                
            // put data into the current batch
            batch.push(
                {
                    "PutRequest" : { "Item" : dataForDynamoDB }
                }
            );
            // Batches are limited to 25 items; so, we "close" a batch when we reach 25 items.
            if (batch.length == 1 || i == event.Records.length-1) {
                putRequestBatches.push(batch);
                batch = [];
            }
        }
        // Here we have in putRequestBatches an array of batches
        for (let i=0; i< putRequestBatches.length; i++) {
            let params = {
                "RequestItems" : {
                    "name of dynamodb-table" : putRequestBatches[i] // put here the name of your ddb table
                }
            };
            console.log(`Writing to dynamodb: ${JSON.stringify(params)}`);
         // SENDING THE REQUEST TO DYNAMODB
            let ddbResponse = await dynamoDBclient.batchWrite(params).promise();
            console.log(ddbResponse);
        }
    } catch(e) {
        //let's handle the errors, if any
        console.log("Error:",e);
        const response = {
            statusCode : 200,
            body : e
        };
        return response;
    }
    const response = {
        statusCode: 200
    };
    return response;
};
